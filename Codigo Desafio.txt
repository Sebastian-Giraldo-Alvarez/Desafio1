
#include <LiquidCrystal.h>
int ultimoValor = 0; //Ultimo valor leido de la señal         
long ultimoTiempo = 0; //Tiempo en el que se obtuvo

// Crear el objeto LCD con los pines correspondientes
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

//Pines de los punsadores
const int pulsador1 = 6; //Iniciar
const int pulsador2 = 7; //Detener

//Estado de los pulsadores
int estadoPulsador1 = LOW; //LOW indica que no esta presionado el pulsador
int estadoPulsador2 = LOW;
int n = 0; //Para identificar que ya se termino la adquisición de datos 

// Control de adquisición de datos
bool adquiriendoDatos = false; // Estado de adquisición
bool ImprimirDatos=false;// Para imprimir datos
int tamArreglo = 2; // Tamaño inicial de arreglo, necesario para despues redimensionar
float* Valores = new float [tamArreglo]; // Puntero al arreglo dinámico
int cantidadElementos=0;//La cantidad de elementos ingresados en la variable

// Variables para almacenar informacion de la señal
long periodo= 0; 
float frecuencia = 0; // Guarda el valor de la frecuencia, se usa float porque es un decimal
float amplitud; // Guarda el valor de la amplitud, se usa float porque es un decimal
const char* formadeOnda; // Guarda la forma de la onda, es una cadena de caracteres

void setup() {
  lcd.begin(16, 2);// Inicializar la pantalla LCD con 16x2
  
  lcd.clear(); // Encender y limpiar la pantalla LCD
  
  lcd.setCursor(0, 0);
  lcd.print("Sistema listo."); // Mostrar un mensaje inicial en LCD
  delay(2000); // Tiempo de duracion del mensaje
  lcd.clear(); // Limpiar pantalla
  
  // Inicializar el puerto serial para ver los datos en el monitor serial
  Serial.begin(9600);
  
  // Configurar los pulsadores como entradas
  pinMode(pulsador1, INPUT);
  pinMode(pulsador2, INPUT);
}

void loop() {
  //Generar los valores de la señal
  int valorSenal = analogRead(A0); // Lee la señal en el pin A0
 
  //Calcular la frecuencia   
  if (valorSenal > 512 && ultimoValor <= 512) {
    
    long tiempoActual = millis();  // Obtiene el tiempo actual
    periodo = tiempoActual - ultimoTiempo;       // Calcula el período
    ultimoTiempo = tiempoActual;                // Actualiza el último tiempo

    // Calcula la frecuencia (en Hz)
    if (periodo > 0) {//para no dividir entre 0
      frecuencia = 1000.0 / periodo;  // Convertir milisegundos a segundos
    }
  }
  
  ultimoValor = valorSenal;  // Actualiza el valor anterior
  float voltajeSenal = (valorSenal - 512) * (5.0 / 1023.0);  // Asumiendo que la referencia es de 5V
  
  //Iniciar adquisición
  if (estadoPulsador1 == HIGH && adquiriendoDatos==false){
    Serial.println("Iniciando la adquisicion de datos...");
    adquiriendoDatos = true; 
  }
  Serial.println(voltajeSenal); // Mostrar el valor en el monitor serial
  
  //Pulsadores
  estadoPulsador1 = digitalRead(pulsador1);
  estadoPulsador2 = digitalRead(pulsador2);
  if(adquiriendoDatos == true){
   	if(tamArreglo == cantidadElementos){
  		int nuevotamano = tamArreglo+1; // Definicion nuevo tamaño del puntero
      	float* nuevoarreglo_Valores = new float[nuevotamano]; //Definicion de nuevo arreglo, asignación del nuevo tamaño
      	for(int i=0; i<tamArreglo; i++){//Ciclo para pasar los valores de un puntero a otro
      		nuevoarreglo_Valores[i] = Valores[i];
        }
      	delete[] Valores;//se quita la reserva de memoria del viejo arreglo 
  		Valores = nuevoarreglo_Valores; //Asignación nombre de variable antigua al nuevo puntero
    	tamArreglo = nuevotamano;//Asignación del nuevo tamaño
    }
  	Valores[cantidadElementos] = voltajeSenal;//
  	cantidadElementos++;
  }
  
  //Detener adquisición
  if(estadoPulsador2 == HIGH && adquiriendoDatos==true){
    Serial.println("Deteniendo la adquisicion...");
    adquiriendoDatos = false;
    n = 1;
  }

  if (n == 1){ //Llamar funciones
    //Llama la funcion que calcula la amplitud y guarda el valor en la variable asignada
    amplitud = calcularAmplitud(Valores, cantidadElementos); //Recibe un arreglo con los datos de la señal y el tamñano
    //Llama la funcion que identifica la forma de onda y guarda la cadena en la variable asignada
    formadeOnda = identificarOnda(Valores, cantidadElementos); //Recibe un arreglo con los datos de la señal y el tamaño
    //Llama la funcion que se encarga de mostrar los datos en la pantalla LCD 16x2
    mostrarDatos(frecuencia, amplitud, formadeOnda); // Recibe los datos calculados anteriormente 
    
    n = 0;
  }
}

//Funcion que sirve para calcular la amplitud
float calcularAmplitud(float *arr, int nelementos){ //Recibe un arreglo dinamico y su cantidad de elementos
  //Variables para recorrer un arreglo, inicializados en el primer dato 
  float valorMax = arr[0];
  float valorMin = arr[0];
  //Encontrar el valor maximo y minimo en el arreglo
  for (int i=1; i<nelementos; i++){ //Recorrer todos los elementos del arreglo
    if(arr[i] > valorMax){ //compara el elemento actual con el valor máximo encontrado anteriormente
      valorMax = arr[i];// En caso de que el condicional se cumpla, se actualiza el valor máximo
    }
    if(arr[i] <valorMin){ // Compara el elemento actual con el valor minimo encontrado anteriormente
      valorMin = arr[i]; // En caso de que el condicional se cumpla, se actualiza el valor minimo 
    }
  }
  //Calcular amplitud
  return (valorMax-valorMin) / 2; 
}

//Identificar Forma de Onda
const char* identificarOnda(float* valores, int nelementos){ //Recibe un arreglo dinamico y su cantidad de elementos
  int cambiosBruscos = 0; //Para contar los cambios bruscos entre valores consecutivos de la señal
  int transicionesSuaves = 0; //Para contar los cambios suaves entre valores consecutivos de la señal
  for (int i = 0; i<nelementos; i++){ //Recorre los valores del arreglo 
    float pendiente = valores[i]-valores[i-1]; //Calcula la diferencia entre dos valores consecutivos de la señal
    if (abs(pendiente)>0.8){//Cambios grandes, ondas cuadradas
      cambiosBruscos++;
    }
    else if (abs(pendiente)>0.05){//Cambios suaves, ondas senoidales
      transicionesSuaves++;
    }
  }
  //SI los cambios bruscos supera las transiciones suaves, se considera una onda cuadrada
  if (cambiosBruscos>transicionesSuaves){
    return "Cuadrada";
  } else{ //Si no es cuadrada verifica si es una onda Triangular
    bool esTriangular = true;
    for (int i =2; i<nelementos; i++){ //Recorre el arreglo nuevamente
      float pendiente1 = valores[i-1]-valores[i-2];
      float pendiente2 = valores[i]-valores[i-1];
      if (abs(pendiente1-pendiente2)>0.01){ // Compara las pendientes entre valores consecutivos 
        //Si las pendieentes son pequeñas indica que la onda es Triangular 
        esTriangular = false; 
        break;
      }
    }
    if (esTriangular){
      return "Triangular";
    }else{
      //Si las transiciones suaves es más de la mitad de los cambios bruscos, la señal es clasificada como senoidal
      if(transicionesSuaves>cambiosBruscos/2){
        return "Senoidal";
      }
      else{ // Si no se cumplen las condiciones anteriores se considera una señal desconocida
        return "Desconocida";
      }
    }
  }
}
// Función para mostrar la frecuencia, amplitud y la forma de onda en la pantalla LCD.
void mostrarDatos(float frecuencia, float amplitud, const char* formadeOnda){
  lcd.setCursor(0,0); // Posiciona el cursor en la primera fila y primera columna (0,0)
  lcd.print("Frecuencia = "); // Imprime "Frecuencia =" en la primera fila
  lcd.setCursor(0,1); // Mueve el cursor a la primera columna y segunda fila (0,1)
  lcd.print(frecuencia); //Imprime el valor de la frecuencia 
  lcd.print("Hz"); // Imprime "Hz" en la segunda fila
  delay(2000); // Pausa la ejecucion
  lcd.clear(); // Borra todo el contenido de la pantalla LCD
  
  lcd.setCursor(0,0); // Posiciona el cursor en la primera fila y primera columna (0,0)
  lcd.print("Amplitud = "); // Imprime "AMplitud =" en la primera fila
  lcd.setCursor(0,1); // Mueve el cursor a la primera columna y segunda fila (0,1)
  lcd.print(amplitud); //Imprime el valor de la amplitud
  lcd.print("V"); // Imprime "V" en la segunda fila
  delay(2000);// Pausa la ejecucion
  lcd.clear(); // Borra todo el contenido de la pantalla LCD
  
  lcd.setCursor(0,0); // Posiciona el cursor en la primera fila y primera columna (0,0)
  lcd.print("Forma de Onda:"); // Imprime "Forma de onda =" en la primera fila
  lcd.setCursor(0,1); // Mueve el cursor a la primera columna y segunda fila (0,1)
  lcd.print(formadeOnda); // Imprime la cadena de caracteres guardada en forma de onda
  delay(2000); // Pausa la ejecucion
  lcd.clear(); // Borra todo el contenido de la pantalla LCD
} 